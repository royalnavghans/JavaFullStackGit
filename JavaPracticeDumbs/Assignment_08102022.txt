Note: googling solutions are not accepted.

1. Using Exception Handling 

build a program to provide the input String from user and parse it to integer, if it is not a number it will throw 
number format exception Catch it and print "Entered input is not a valid format for an integer."
or else print the square of that number. 


Enter an integer: 13
The square value is 169
The work has been done successfully

Sample input and output 2:
Enter an integer: Rajesh
Entered input is not a valid format for an integer.


2. Using Exception Handling: Try-catch 	

Write a program that takes as input the size of the array and the elements in the array.
 The program then asks the user to enter a particular index and prints the element at that index.
 This program may generate Array Index Out Of Bounds Exception. Use exception handling mechanisms to handle this exception. 
In the catch block, print the class name of the exception thrown. 

Sample Input and Output 1: 

I/P:

Enter the number of elements in the array 3 
Enter the elements  in the array 20 90 4 

Enter the index of the array element you want to access 2 

The array element at index 2 = 4 

O/P:

The array element successfully accessed

Sample Input and Output 2: 

Enter the number of elements in the array 3 

Enter the elements in the array 20 90 4 

Enter the index of the array element you want to access 6 

o/p:

java.lang.ArrayIndexOutOfBoundsException



3. Using Exception Handling: Try-catch Use multiple catch block 	


Write a program that takes as input the size of the array and the elements in the array. The program then asks the user to enter a particular index and prints 
the element at that index. Index starts from zero.

This program may generate Array Index Out Of Bounds Exception or NumberFormatException . Use exception handling mechanisms to handle this exception.

Sample Input and Output 1: Enter the number of elements in the array 2 Enter the elements in the array 50 80 Enter the index of the array element you want to access 1 The array element at index 1 = 80 The array element successfully accessed

Sample Input and Output 2: Enter the number of elements in the array 2 Enter the elements in the array 50 80 Enter the index of the array element you want to access 9 java.lang.ArrayIndexOutOfBoundsException

Sample Input and Output 3: Enter the number of elements in the array 2 Enter the elements in the array 30 j java.lang.NumberFormatException

4. Using Exception handling: throws 

Write a class MathOperation which accepts integers from command line. 
Create an array using these parameters. 
Loop through the array and obtain the sum 
and average of all the elements. Display the result.
 Check for various exceptions that may arise like ArithmeticException, NumberFormatException, and so on. 

5. using throws  :

Write a Program with a division method who receives two integer numbers and performs the division operation. 
The method should declare that it throws ArithmeticException. This exception should be handled in the main method.

6. using Exception Handling: Throw & Used Defined Exception 	

Write a Program to take care of Number Format Exception if user enters values other than integer for calculating average marks of 2 students. 
The name of the students and marks in 3 subjects are taken from the user while executing the program. 
In the same Program write your own Exception classes to take care of Negative values and values out of range (i.e. other than in the range of 0-100)

7. using  Exception handling: User Defined Exception & throw 	 

Write a program to accept name and age of a person from the command prompt(passed as arguments when you execute the class) and ensure that the age entered is >=18 
it should print "You can vote"and < 18 it should print "you cannot vote" in the exception. Display proper error messages. The program must exit gracefully after displaying the error message in case the arguments passed are not proper. 
(Hint : Create a user defined exception class for handling errors.)

8. using Exception Handling: Finally block 

Write a program that accepts 2 integers a and b as input and finds the quotient of a/b. This program may generate an Arithmetic Exception. Use exception handling mechanisms to handle this exception. In the catch block, print the message as shown in the sample output. Also illustrate the use of finally block. Print the message “Inside finally block”. Sample Input and Output 1: Enter the 2 numbers 5 2 The quotient of 5/2 = 2 Inside finally block Sample Input and Output 2: Enter the 2 numbers 5 0 DivideByZeroException caught Inside finally block



Java  Collections:

1.Create ArrayList with list of all possible vegetables using ArrayList() constructor and you perform below actions

Part-1:

to check if an ArrayList is empty using the isEmpty() method.
to find the size of an ArrayList using the size() method.
to access the element at a particular index in an ArrayList using the get() method.
to modify the element at a particular index in an ArrayList using the set() method.

Part-2:

Implement List Iterations using :

Iterate using for loop with index

Iterate using simple for-each loop


Iterate using an iterator() iterator(),

Iterate using a listIterator() to traverse in both directions  

Part-3:

Remove element at position 3 and 4

Remove all the elements from arraylist at a time.

2. Create a linked list with a set of integer elements with max 10 elements and then perform below actions

   1.Adding an element at the specified position in the LinkedList
   2.Adding an element at the beginning of the LinkedList
   3.Adding an element at the end of the LinkedList 
   4.Add 5 new elements at a time to the end of the list
   5.Use all possible methods to access the first element
   6.Use all possible methods to access the last element
   7.Use all possible methods to remove the first element
   8.use all possible elements to remove last element
   9.deteremine size of the list.
   10.RETRIEVE ALL THE ELEMENTS FROM THE LINKED LIST USING LIST ITERATOR.


3. CREATE ARRAYLIST FOR EMPLOYEE NAMES  WITH BELOW REQUIREMENTS.

    LIST SHOULD ALLOW TO ADD DUPLICATE ELEMENTS

    LIST SHOULD ALLOW NULL VALUES

    LIST SHOULD MAINTAIN THE INSERTION ORDER.

    After performaing all above operations return all the elements from the list over the console.
